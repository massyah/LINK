import random
import psycopg2
import sys
from numpy import dot
import numpy
import pylab


sys.path.append("../model")
import model as docmodel

## Generate pmid sets
docmodel.AnnotatedGraph.build_HPRDNPInteractome()


tgf_beta_pmids=[11590145, 9858566, 11278756, 12429842, 14728725, 14966294, 15464984, 10890911, 17052192, 9707553, 10531362, 9545258, 12729750, 15034927, 11226163, 12118366, 12859960, 8106553, 15688032, 11094085, 10878024, 11163210, 11438668, 16027725, 10500174, 9774674, 10485843, 18299321, 12023901, 9872992, 11278442, 16449645, 8754798, 12099698, 10542199, 11371641, 11323414, 11741830, 12145287, 11904140, 10962029, 17108118, 12958365, 12917407, 10757800, 17510063, 16247473, 17673906, 12144826, 15946939, 12631740, 11359933, 12015308, 10969803, 14976204, 9679056, 9335505, 12150994, 8657117, 15084259, 12794086, 12732139, 11102446, 10938097, 10531062, 9311995, 15761148, 11279102, 12023040, 12374795, 9732876, 18334480, 10085140, 12718878, 9926943, 12740389, 12065577, 11483955, 11114293, 9702198, 10942775, 11691834, 11555647, 11160896, 10716993, 14657354, 11387212, 7608141, 11850637, 18568018, 12519765, 10220381, 11818334, 10037600, 10199400, 14993265, 9843571, 11042172, 12743038, 8643455, 15001984, 12941698, 12543979, 9144196, 9215638, 11280774, 8832394, 7958925, 9346966, 14988407, 7760804, 10400677, 12191473, 10722728, 11278251, 11804592, 9435577, 11546783, 10025408, 12650946, 10224067, 7566156, 12000714, 15496141, 11058129, 14612439, 10846168, 9856985, 11382746, 9813111, 11278302, 9865696, 8530343, 15623506, 12408818, 10887155, 14657019, 12589052, 16751101]
egfr_pmids=[12149250, 8798379, 10499589, 10938113, 10971656, 12429840, 10618391, 8524316, 10593883, 9305638, 17956904, 19509291, 10075741, 11226163, 11084343, 12446727, 11094073, 2543678, 11823456, 10329666, 12878187, 12388423, 3494473, 10973965, 9733714, 12873812, 12220502, 18662999, 10393179, 15016378, 1633149, 3260004, 9885285, 11843178, 8700527, 11116146, 9677429, 12193410, 7527043, 10675333, 8140422, 17182860, 11349134, 14523024, 18835089, 10473620, 15252117, 10788507, 11459228, 8596638, 9049247, 15504032, 10669730, 11731619, 9857190, 12234920, 7791787, 11602604, 9506989, 14679215, 11726515, 12646582, 10026169, 10779323, 8226933, 14744865, 12815057, 12697810, 12853971, 9539797, 9050838, 1856216, 11158308, 8550624, 18594017, 11075810, 11114724, 19531499, 18215660, 14676207, 9852145, 12832467, 12173045, 9395447, 12871937, 12577067, 7532293, 12070153, 8385802, 1333047, 10090765, 12556561, 12593795, 18625302, 10362652, 9544989, 11331873, 12477732, 18253097, 9372971, 9642287, 14583600, 10973489, 8940083, 8479540, 9006901, 12974390, 7744823, 15284024, 15467833, 8479541, 1333046, 9079622, 12792650, 7673163, 17395426, 11894095, 11302736, 8650580, 8810325, 11394904, 8626525, 14963038, 7518560, 10576742, 19318123, 9050991, 12640115, 9843575, 10358079, 10508618, 17998205, 11432831, 9837959, 8702859, 18096367, 10506143, 9660833, 7805859, 11099046, 12009895, 10781609, 7761838, 8586671, 11279280, 15090612, 11956154, 19118012, 12628925, 10428862, 18463167, 10086340, 11533253, 12803489, 10558875, 8662998, 9135065, 10835420, 18602463, 18094049, 11021801, 12464621, 10362357, 19169273, 10913276, 2266111]
notch_pmids=[10433920, 11585921, 11827460, 15316101, 7566092, 15314183, 14638857, 11604490, 12370315, 12594956, 12814948, 8755477, 11461910, 10940313, 12522139, 9032325, 11101851, 11418662, 10851137, 11404076, 9169836, 14999091, 11739188, 11006133, 8642313, 11604511, 15156153, 10747963, 12011466, 11425854, 11564735, 12548545, 12050117, 9694793, 12794186, 12682059, 10713164, 9874765, 14592976, 8749394, 14622115, 12374742, 14583609, 8687460, 12794074, 11486045, 10958687, 14500836, 10077672, 12913000, 14567914, 11551980, 12644465, 12050162, 10082551, 12589049, 11518718]
random_pmids=[10320483, 11136726, 7514182, 14992722, 9609114, 12176010, 11994288, 10036239, 12810624, 8408000, 19667018, 9671490, 8235072, 10913121, 10788511, 12161429, 12111331, 12171600, 19592647, 19907312, 19543393, 12391275, 8240350, 11352924, 16000956, 11181075, 15131699, 12006486, 12909625, 14502648, 11441107, 11043578, 10206983, 20197549, 11834733, 12119297, 10400685, 19075796, 10400650, 15339904, 20200952, 9252390, 12023960, 14716005, 6281764, 11606411, 12499563, 11243883, 10590070, 10913111, 2786140, 8955171, 18510923, 12244302, 12244095, 18160398, 17053785, 11856313, 8382609, 19219026, 12783284, 12118366, 15184379, 15004274, 10903717, 7626035, 15247416, 10498867, 11369516, 19063725, 10455134, 9973195, 11668176, 17234744, 11029585, 11571266, 18845642, 9736712, 8583572, 12011060, 18443042, 18046411, 9325253, 9045717, 12052822, 7509358, 12427546, 18211802, 12376537, 20886035, 18217945, 16091426, 18687633, 21181220, 17030949, 15314064, 10900203, 12691919, 15364926, 10744726, 12529648, 10861283, 10748209, 11172033, 10984435, 12660241, 11369769, 10448098, 11191109, 19513943, 15229287, 11377425, 12915402, 11376344, 10400985, 17675470, 8479541, 11827462, 8626767, 19299736, 19353248, 18056446, 16364285, 9813111, 15895076, 10747027, 20921622, 18034190, 8259519, 10903746, 17786191, 19371791, 9122164, 15537637, 15833084, 11406157, 17382325, 2500966, 16533754, 12202768, 6395883, 15388328, 15784622, 19226302, 21188205, 19567633, 20600848, 10652206, 8289796, 10856704, 12177006, 17081991, 14722085, 11546661, 9519411, 8195113, 8755541, 11046044, 16537926, 15184042, 9724731, 2201681, 15378026, 11580899, 21132384, 1722201, 10318861, 8387155, 8617195, 11053353, 11504882, 21148085, 11024021, 19338049, 11313406, 18508656, 12435627, 12540855, 12750254, 11781095, 3417634, 17220880, 8610159, 7542250, 11226259, 12198130, 3359486, 7862125, 20090527, 17627277, 15962011, 19809833, 9528852, 10790371, 20581672, 12439743, 16582099, 11069896, 16624932, 8380639, 7638186, 12110186, 15504032, 1985196, 16513638, 11777929, 20723598, 8858149, 12050114, 18586982, 12086608, 8537410, 17644734, 11470407, 20921519, 14507929, 9516463, 17194752, 21333552, 10655477, 19285079, 19211042, 12492477, 1639787, 11803371, 20067572, 10228160, 11981030, 16093349, 15494521, 16548525, 8605874, 11884147, 16983331, 1944596, 7505783, 15817462, 16678487, 17182170, 17135268, 17919297, 11358867, 10949025, 19833085, 1331778, 16227623, 9687510, 8106527, 11726277, 19912252, 14712220, 17928598, 9620846, 15073332, 8272872, 9712898, 9659900, 15138255, 19439349, 10746662, 3021779, 17982103, 15226301, 17416748, 8112321, 10385525, 6083454, 8955077, 7876239, 11923248, 14690602, 12663490, 12438563, 9710638, 10220405, 9730828, 19901061, 12847098, 9703991, 10080919, 11970879, 9188692, 21045017, 19464382, 12419808, 20122166, 16407849, 8609172, 12359753, 16873067, 19336531, 16984975, 18711434, 17043358, 16709958, 7545675, 11689694, 12874243, 20107175, 9878049, 15023544, 6847627, 11909529, 20129920, 19923474, 9182804, 12766176, 11864573, 19357696, 15692560, 10647184, 14603253, 9312027, 12388423, 11278595, 10564259, 19472211, 12915405, 15678106, 11739735, 9799084, 20576117, 10066823, 9751706, 11470158, 12676529, 10852710, 15637053, 8616895, 12574169, 11251075, 1310678, 8349691, 9888835, 11551900, 11237613, 9335118, 12620222, 9794455, 8798720, 2566624, 11154276, 11237865, 10548487, 1331514, 18714018, 9360998, 9168896, 16769902, 8358790, 12855681, 7505012, 11598127, 12829792, 9804427, 10026156, 12736272, 16216881, 12616539, 21050946, 12628243, 11952167, 11131153, 1381348, 16931914, 16732327, 19635864, 15251430, 20181929, 15831449, 17268553, 12754204, 12391145, 9024663, 19801552, 15322111, 20677276, 11595749, 10191277, 9285683, 8386805, 10982407, 12142027, 17919190, 8390986, 12816955, 6188845, 10022833, 19923204, 9160750, 15504896, 9099755, 19879162, 21169541, 19058874, 1370087, 7583357, 9606214, 12493754, 10359577, 874082, 16823880, 11677365, 11744693, 9374536, 19553602, 21283540, 9271438, 9516488, 10731421, 15886201, 9788596, 19020305, 9660793, 7874447, 1997653, 12099703, 10978534, 7537775, 20830731, 19022809, 10924145, 10399917, 18077452, 9323132, 7602097, 12150791, 9546612, 16303566, 9786855, 12709411, 16775153, 12082530, 6697390, 11728801, 12117724, 12564933, 12773547, 12435603, 16820059, 8612573, 9044836, 12019209, 20660788, 12626493, 14734547, 12941954, 9288972, 15661890, 17360466, 14978013, 18165436, 15768032, 11909966, 15819698, 10764593, 7629060, 15911745, 18181176, 9755165, 16391014, 12101409, 11709720, 9878046, 10882073, 11350939, 9677412, 2985435, 10082557, 9857190, 12654918, 12640464, 15367677, 9819198, 8065329, 9914516, 15474030, 12082103, 12771146, 10713676, 10066435, 10353244, 11155740, 1847074, 21130688, 12052862, 21084465, 10945991, 14523011, 9832551, 11202906, 7539415, 8047140, 9501089, 9822615, 9883900, 17115031, 15264020, 8631303, 3795040, 10066810, 12591939, 16439210, 2785270, 11910029, 16038727, 8454628, 14634134, 17937463, 6457647, 9072970, 17409355, 8954613, 19923172, 2544585, 10072511, 14734562, 15357954, 8662816, 12761227, 15615774, 11069905, 11331872, 19959471, 1633809, 12665511, 12475947, 12586732, 19066453, 19553527, 12368291, 14670297, 9139733, 11742976, 7598732, 10358759, 7535770, 17328715, 20451603, 16753179, 19182257, 8626548, 12482967, 14637022, 12951049, 11994279, 16906133, 11018051, 12950453, 11551912, 7836374, 10938112, 19535621, 11328818, 8676080, 17525332, 11544308, 10493750, 7680645, 8405050, 18813073, 10498338, 10940306, 15705715, 21219575, 21317395, 15099517, 10097108, 9111318, 14681219, 11814693, 2825022, 20145116, 15282543, 15878342, 12738960, 10521497, 12769842, 9150368, 15861137, 10430872, 21144866, 11432859, 9721205, 9128259, 8668165, 18286572, 19494515, 11049968, 17318178, 14506720, 17534907, 18562307, 9032233, 11602572, 9407100, 7623817, 21035432, 10559981, 11956192]

## Adding random pmids
n_random=0
q="""SELECT pmid from "Publication"  ORDER BY RANDOM() LIMIT %d;"""%(n_random)
conn=psycopg2.connect("dbname=th17 password=th17")
cur=conn.cursor()
cur.execute(q)
res=cur.fetchall()


backgroundpmids=set()
backgroundpmids.update(tgf_beta_pmids)
backgroundpmids.update(egfr_pmids)
backgroundpmids.update(notch_pmids)
backgroundpmids.update(random_pmids)
backgroundpmids.update([r[0] for r in res])
backgroundpmids.update(docmodel.AnnotatedGraph.HPRDNPInteractome.references())
backgroundpmids=list(backgroundpmids)

len(backgroundpmids)

## Building the corpus

print len(backgroundpmids),"publications to rebuild"
docmodel.prepare_corpus(backgroundpmids)

# sys.exit(0)

## TF-IDF corpus
# tfCorpus=docmodel.VectorCorpus(backgroundpmids)
# logentCorpus=docmodel.VectorCorpus(backgroundpmids,use_logent=True)

## Compute the SVD
lsiCorpus=docmodel.LSICorpus(backgroundpmids,num_topics=500)
# lsiSmallCorpus=docmodel.LSICorpus(backgroundpmids,num_topics=100)
# lsiMediumCorpus=docmodel.LSICorpus(backgroundpmids,num_topics=200)
# lsiLargeCorpus=docmodel.LSICorpus(backgroundpmids,num_topics=800)
lsiLogEntCorpus=docmodel.LSICorpus(backgroundpmids,use_logent=True,num_topics=500)
lsiLogEntMediumCorpus=docmodel.LSICorpus(backgroundpmids,use_logent=True,num_topics=250)
# lsiLogEntMediumNoGeniaCorpus=docmodel.LSICorpus(backgroundpmids,use_logent=True,num_topics=250,use_genia=False)
# lsiLogEntSmallCorpus=docmodel.LSICorpus(backgroundpmids,use_logent=True,num_topics=100)


## sanity checks
aP=lsiLogEntMediumCorpus._pmids[0]
# assert(lsiCorpus.publication_by_similarity_to_vec(lsiCorpus[aP])[0][0]==aP)
# assert(lsiSmallCorpus.publication_by_similarity_to_vec(lsiSmallCorpus[aP])[0][0]==aP)
# assert(lsiMediumCorpus.publication_by_similarity_to_vec(lsiMediumCorpus[aP])[0][0]==aP)
# assert(lsiLogEntCorpus.publication_by_similarity_to_vec(lsiLogEntCorpus[aP])[0][0]==aP)
assert(lsiLogEntMediumCorpus.publication_by_similarity_to_vec(lsiLogEntMediumCorpus[aP])[0][0]==aP)
# assert(lsiLogEntMediumNoGeniaCorpus.publication_by_similarity_to_vec(lsiLogEntMediumNoGeniaCorpus[aP])[0][0]==aP)
# assert(lsiLogEntSmallCorpus.publication_by_similarity_to_vec(lsiLogEntSmallCorpus[aP])[0][0]==aP)
# assert(tfCorpus.publication_by_similarity_to_vec(tfCorpus[aP])[0][0]==aP)
# assert(logentCorpus.publication_by_similarity_to_vec(logentCorpus[aP])[0][0]==aP)


## Computing similarities between class center and positive docs


def score_sim(sim):
	for k in [20,50,100,200]:
		print k,":",
		posDocs=set(sim[:k]).intersection(all_pos_pubs)
		print "%d, %0.f%%"%(len(posDocs),len(posDocs)*1.0/len(all_pos_pubs)*100)

## Sampling and TF sim 

all_pos_pubs=tgf_beta_pmids
posPubs=random.sample(all_pos_pubs,5)

# LSI Sims
# for lsiC in [tfCorpus,logentCorpus,lsiCorpus,lsiSmallCorpus,lsiMediumCorpus,lsiLogEntCorpus,lsiLogEntMediumCorpus,lsiLogEntSmallCorpus]:
for lsiC in [lsiLogEntMediumCorpus,lsiCorpus,lsiLogEntCorpus]:
	lsi_doc=lsiC.pmids_to_vec(posPubs)
	lsi_sim=[x[0] for x in lsiC.publication_by_similarity_to_vec(lsi_doc)]
	score_sim(lsi_sim)
	print "__"*12


# sys.exit(0)
## Computational time for lsi rep

tf_doc=tfCorpus.pmids_to_vec(posPubs)
lsi_doc=lsiLogEntCorpus.pmids_to_vec(posPubs)
#! %timeit tfCorpus.publication_by_similarity_to_vec(tf_doc)
#! %timeit lsiLogEntCorpus.publication_by_similarity_to_vec(lsi_doc)


## Computing corelation between lsidoc and centroid
# Very high positive corelation, but not equality

centroid_doc=numpy.zeros(lsiLogEntCorpus.num_topics,dtype='float32')

for r in posPubs:
	centroid_doc=centroid_doc+lsiLogEntCorpus[r]

centroid_doc=centroid_doc/len(posPubs)*1.0


sims1=[]
sims2=[]
# for p in backgroundpmids[:4000]:
for p in all_pos_pubs:
	sim1=dot(lsiLogEntCorpus[p],lsi_doc.T)
	sim2=dot(lsiLogEntCorpus[p],centroid_doc.T)
	sims1.append(sim1)
	sims2.append(sim2)

#plot it
pylab.clf()
pylab.ylim((0,1))
pylab.xlim((0,1))

pylab.scatter(sims1,sims2)
pylab.show()

## Computing corelation between lsi and full dim
sims1=[]
sims2=[]
nPoints=2000
for i in range(nPoints):
# for p in corpus.publications:
	p1=random.choice(tgf_beta_pmids)
	p2=random.choice(tgf_beta_pmids)
	sim1=dot(lsiCorpus[p1],lsiCorpus[p2].T)
	sim2=dot(tfCorpus[p1],tfCorpus[p2].T)
	sims1.append(sim1)
	sims2.append(sim2)

#plot it
pylab.clf()
pylab.ylim((0,1))
pylab.xlim((0,1))
pylab.scatter(sims1,sims2)
pylab.show()

## Comparing small SVD with the truncated coords
# Conc: It's not equivalent to truncate the coordinates, the topics are different when we change the number of diemensions

# Computing small SVD
small_lsi=models.LsiModel(corpus.normalized_pub_terms.values(),id2word=backgroundDict.id2word,numTopics=10) 

aPub=random.choice(pubs)
aPub.lsiBig=this_lsi[corpus.normalized_pub_terms[aPub.pmid]]
aPub.lsiSmall=small_lsi[corpus.normalized_pub_terms[aPub.pmid]]
